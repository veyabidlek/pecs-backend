"""
Django settings for pecs project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from django.contrib import messages
from datetime import timedelta

from django_otp.plugins.otp_email.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional locations of static files, if any
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q#c6+8)_p$zv_47x0r+r6%1x2@t@-m32oux0%t2h1l5rhgll4&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'apps',
    'widget_tweaks',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    'django.contrib.staticfiles',
    'storages'
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': '14674a8bee1e5549c7df41535297415a8c3a9083f9a9c1b3e0a8d45bb05d93de',
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_otp.middleware.OTPMiddleware'
]

CORS_ALLOWED_ORIGINS = [
    "https://april-speaks.vercel.app",
    "http://localhost:3000"
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

ROOT_URLCONF = 'pecs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pecs.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'pecs_db',
        'USER': 'pecs_user',
        'PASSWORD': 'yJK$Uh_CU^6G',
        'HOST':'localhost',
        'PORT': '5432',
    }
}

SWAGGER_SETTINGS = {
    # ```
    # 'DEFAULT_INFO': 'path.to.your.api_info',  # Optional for default API info
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'description': 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"',
            'name': 'Authorization',
            'in': 'header',
        }
    },
    'USE_SESSION_AUTH': False,  # Disable session-based authentication in Swagger
    'SECURITY': [{'Bearer': []}],  # Globally require Bearer for all endpoints
    # ```
}



# Cloudflare R2 Configuration
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# R2 Access Keys
AWS_ACCESS_KEY_ID = '25a511b46cb0c5f02cb0af7a40ca5488'
AWS_SECRET_ACCESS_KEY = 'b36dbbb3def1f42f56e1aca128a903cd98ded9b6caf8fdd0d1190bd24bfd6b57'

# R2 Bucket and Endpoint
AWS_STORAGE_BUCKET_NAME = 'images'
AWS_S3_ENDPOINT_URL = 'https://9e8809518f4a26bfae073ab9e56e428d.r2.cloudflarestorage.com'

# Optional Settings
AWS_QUERYSTRING_AUTH = False  # Set to True if you want querystring-based authentication
AWS_S3_SIGNATURE_VERSION = 's3v4'  # Add this to ensure signature version is compatible with Cloudflare R2


AWS_S3_REGION_NAME = 'auto'  # Required for R2
AWS_DEFAULT_ACL = 'public-read'  # If you want files to be publicly accessible
AWS_S3_VERIFY = True
AWS_S3_FILE_OVERWRITE = False  # Prevent files with same name overwriting each other

MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.{AWS_S3_ENDPOINT_URL.split("://")[1]}/'


# ACCESS_KEY = "25a511b46cb0c5f02cb0af7a40ca5488"
# SECRET_KEY = "b36dbbb3def1f42f56e1aca128a903cd98ded9b6caf8fdd0d1190bd24bfd6b57"
# ENDPOINT = "https://9e8809518f4a26bfae073ab9e56e428d.r2.cloudflarestorage.com"
# BUCKET_NAME = "tutorial"
